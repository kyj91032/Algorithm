# 약수의 합 알고리즘: 자연수 n에 대하여 모든 약수의 합을 구한다

# 약수의 합 기본 동작 과정
'''
1. n의 약수. 1부터 n까지 후보들 중 반복해서 판별
2. sum 누적 변수에 더하기
'''

''' python
import math
def sum(n):
	s = 0
	for i in range(1, int(math.sqrt(n)) + 1): # 대칭성 활용해서 후보 제거
		if n % i == 0:
			s += i
			s += n / i
	if i * i == n:
		s -= i; # 중복 
	return int(s)
'''
''' 약수의 합 아이디어
3의 배수를 생각해보자. 3의 배수는 3, 6, 9, ... 이다. 즉, 3의 배수는 3을 약수로 갖는다. 
또한 4의 배수는 4를 항상 약수로 갖는다.
또한 5의 배수는 5를 항상 약수로 갖는다.
N의 배수는 N을 항상 약수로 갖는다.
그러므로 N이하의 자연수 중에서 i를 약수로 갖는 개수는 N / i개 이다.
따라서 i를 약수로 갖는 개수에 약수만 곱해주고 그걸 1부터 N까지 자연수에서 실행한 후 합하면 1 ~ N까지 각각 자연수의 약수의 총 합이 나온다.
n = int(input())
sum_ = 0
for i in range(1, n + 1):
    sum_ += (n // i) * i # 어떤 자연수가 i를 약수로 가지는지는 모르지만, 약수 1의 합.. 2의 합.. 3의 합..으로 쭉 구할 수 있다. (i를 약수로 갖는 수의 개수 * i = 약수 i의 합)
print(sum_)
'''
